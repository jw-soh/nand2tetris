// This file is created by Jun as an initiative to implement the Mux8Way16 gate
// The idea is to use the same method as how the Mux16 is implemented and apply it 
// to a Mux8Way16.
// File name: projects/01/Mux8Way.hdl

CHIP Mux8Way {
    IN a, b, c, d, e, f, g, h, sel[3];
    OUT out;

    PARTS:
    // Put your code here:
    Not(in=sel[0], out=notSel0);
    Not(in=sel[1], out=notSel1);
    Not(in=sel[2], out=notSel2);

    // Could implement an And4 gate here to reduce complexity
    And3(a=notSel2, b=notSel1, c=notSel0, out=w0);
    And(a=w0, b=a, out=w00);
    
    And3(a=notSel2, b=notSel1, c=sel[0], out=w1);
    And(a=w1, b=b, out=w01);

    And3(a=notSel2, b=sel[1], c=notSel0, out=w2);
    And(a=w2, b=c, out=w02);

    And3(a=notSel2, b=sel[1], c=sel[0], out=w3);
    And(a=w3, b=d, out=w03);

    And3(a=sel[2], b=notSel1, c=notSel0, out=w4);
    And(a=w4, b=e, out=w04);

    And3(a=sel[2], b=notSel1, c=sel[0], out=w5);
    And(a=w5, b=f, out=w05);

    And3(a=sel[2], b=sel[1], c=notSel0, out=w6);
    And(a=w6, b=g, out=w06);

    And3(a=sel[2], b=sel[1], c=sel[0], out=w7);
    And(a=w7, b=h, out=w07);

    // The Or gates below are the raw implementation of a Or4Way
    Or(a=w00, b=w01, out=o1);
    Or(a=o1, b=w02, out=o2);
    Or(a=o2, b=w03, out=o3);
    Or(a=o3, b=w04, out=o4);
    Or(a=o4, b=w05, out=o5);
    Or(a=o5, b=w06, out=o6);
    Or(a=o6, b=w07, out=out);
}